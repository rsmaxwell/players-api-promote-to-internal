#!/bin/bash

if [[ ! -z "${PORT}" ]]; then
  PORT=4201
fi

ENDPOINT="http://localhost:${PORT}/players-api"

echo "------------------------------------------------------------------"
echo "Register"

COMMAND="/users/register"

cat > data.json <<EOT
{  
    "userID": "007",
    "firstname": "James",
    "lastname": "Bond",
    "email": "007@mi6.uk.gov",
    "password": "topsecret"
}
EOT
jq . data.json

curl -X POST ${ENDPOINT}${COMMAND} \
--silent \
--cookie cookie-jar.txt \
--cookie-jar cookie-jar.txt \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--data-binary @data.json \
--dump-header dump-header.txt \
--output output.txt \
--write-out %{http_code} > status.txt
result=$?
set +x

echo "result: ${result}"
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

status=$(cat status.txt)
echo "status: ${status}"
if [ "${status}" -eq 200 ]; then
    : # ok
elif [ "${status}" -eq 400 ]; then
    : # ok, already exists
else
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

jq . output.txt

echo "------------------------------------------------------------------"
echo "Authenticate"

COMMAND="/users/authenticate"
USERID="007"
PASSWORD="topsecret"

echo "{ \"userid\": \"${USERID}\", \"password\": \"${PASSWORD}\" }" | jq .

curl -X POST -u "${USERID}:${PASSWORD}" ${ENDPOINT}${COMMAND} \
--silent \
--cookie cookie-jar.txt \
--cookie-jar cookie-jar.txt \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--dump-header dump-header.txt \
--output output.txt \
--write-out %{http_code} > status.txt
result=$?

echo "result: ${result}"
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

status=$(cat status.txt)
echo "status: ${status}"
if [ "${status}" -eq 200 ]; then
    : # ok
else
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

jq . output.txt

word=$(grep Access-Token dump-header.txt | cut -d " " -f 2)
AccessToken=${word%%[[:space:]]}
echo "AccessToken: [${AccessToken}]"

RefreshToken=$(grep Set-Cookie dump-header.txt | cut -d " " -f 2 | cut -d "=" -f 2)
echo "RefreshToken: [${RefreshToken}]"

echo "------------------------------------------------------------------"
echo "Register"

COMMAND="/users/register"

cat > data.json <<EOT
{  
    "userID": "alice",
    "firstname": "Alice",
    "lastname": "Wonderland",
    "email": "alice@abc.com",
    "password": "wonder"
}
EOT
jq . data.json

curl -X POST ${ENDPOINT}${COMMAND} \
--silent \
--cookie cookie-jar.txt \
--cookie-jar cookie-jar.txt \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--data-binary @data.json \
--dump-header dump-header.txt \
--output output.txt \
--write-out %{http_code} > status.txt
result=$?
set +x

echo "result: ${result}"
if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

status=$(cat status.txt)
echo "status: ${status}"
if [ "${status}" -eq 200 ]; then
    : # ok
elif [ "${status}" -eq 400 ]; then
    : # ok, already exists
else
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

jq . output.txt

echo "------------------------------------------------------------------"
echo "Update Person Role"

COMMAND="/users/role/alice"

cat > data.json <<EOT
{
    "role": "normal"
}
EOT
jq . data.json

curl -X PUT ${ENDPOINT}${COMMAND} \
--silent \
--cookie cookie-jar.txt \
--cookie-jar cookie-jar.txt \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--header "Authorization: Bearer ${AccessToken}" \
--data-binary @data.json \
--dump-header dump-header.txt \
--output output.txt \
--write-out %{http_code} > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
echo "status: ${status}"

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

jq . output.txt

echo "------------------------------------------------------------------"
echo "Refresh"

COMMAND="/users/refresh"

set -x
curl -X POST ${ENDPOINT}${COMMAND} \
--silent \
--cookie cookie-jar.txt \
--cookie-jar cookie-jar.txt \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--header "Authorization: Bearer ${AccessToken}" \
--dump-header dump-header.txt \
--output output.txt \
--write-out %{http_code} > status.txt
set +x

result=$?
status=$(cat status.txt)

echo "result: ${result}"
echo "status: ${status}"

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

AccessToken_old=${AccessToken}
RefreshToken_old=${RefreshToken}

word=$(grep Access-Token dump-header.txt | cut -d " " -f 2)
AccessToken=${word%%[[:space:]]}
echo "AccessToken: [${AccessToken}]"

RefreshToken=$(grep Set-Cookie dump-header.txt | cut -d " " -f 2 | cut -d "=" -f 2)
echo "RefreshToken: [${RefreshToken}]"

if [ "${AccessToken_old}" == "${AccessToken}" ]; then
    echo "AccessToken has NOT CHANGED"
else
    echo "AccessToken HAS changed"
fi

if [ "${RefreshToken_old}" == "${RefreshToken}" ]; then
    echo "RefreshToken has NOT CHANGED"
else
    echo "RefreshToken HAS changed"
fi

jq . output.txt

echo "------------------------------------------------------------------"
echo "Update Person Player"

COMMAND="/users/player/alice"

cat > data.json <<EOT
{
    "player": true
}
EOT
jq . data.json

curl -X PUT ${ENDPOINT}${COMMAND} \
--silent \
--cookie cookie-jar.txt \
--cookie-jar cookie-jar.txt \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--header "Authorization: Bearer ${AccessToken}" \
--data-binary @data.json \
--dump-header dump-header.txt \
--output output.txt \
--write-out %{http_code} > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
echo "status: ${status}"

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

jq . output.txt

echo "------------------------------------------------------------------"
echo "Read Person - alice - [no access token]"

COMMAND="/users/alice"

curl -X GET ${ENDPOINT}${COMMAND} \
--silent \
--cookie cookie-jar.txt \
--cookie-jar cookie-jar.txt \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--data-binary @data.json \
--dump-header dump-header.txt \
--output output.txt \
--write-out %{http_code} > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
echo "status: ${status}"

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 401 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

jq . output.txt

echo "------------------------------------------------------------------"
echo "Read Person - alice"

COMMAND="/users/alice"

curl -X PUT ${ENDPOINT}${COMMAND} \
--silent \
--cookie cookie-jar.txt \
--cookie-jar cookie-jar.txt \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--header "Authorization: Bearer ${AccessToken}" \
--data-binary @data.json \
--dump-header dump-header.txt \
--output output.txt \
--write-out %{http_code} > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
echo "status: ${status}"

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

jq . output.txt

echo "------------------------------------------------------------------"
echo "Read People"

COMMAND="/users"

cat > data.json <<EOT
{
    "filter": [
        "admin",
        "normal",
        "suspended"
    ]
}
EOT
jq . data.json

curl -X GET ${ENDPOINT}${COMMAND} \
--silent \
--cookie cookie-jar.txt \
--cookie-jar cookie-jar.txt \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--header "Authorization: Bearer ${AccessToken}" \
--data-binary @data.json \
--dump-header dump-header.txt \
--output output.txt \
--write-out %{http_code} > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
echo "status: ${status}"

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

jq . output.txt

echo "------------------------------------------------------------------"
echo "Logout"

COMMAND="/users/logout"

curl -X GET ${ENDPOINT}${COMMAND} \
--silent \
--cookie cookie-jar.txt \
--cookie-jar cookie-jar.txt \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--header "Authorization: Bearer ${AccessToken}" \
--data-binary @data.json \
--dump-header dump-header.txt \
--output output.txt \
--write-out %{http_code} > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
echo "status: ${status}"

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

jq . output.txt

echo "------------------------------------------------------------------"