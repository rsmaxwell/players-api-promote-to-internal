#!/bin/bash

ENDPOINT="http://localhost:${PORT}/players-api"

OPTIONS="--silent --cookie cookie-jar.txt --cookie-jar cookie-jar.txt -w %{http_code}"

echo "------------------------------------------------------------------"
echo "Register"

COMMAND="/users/register"

cat > data.json <<EOT
{  
    "userID": "fred",
    "firstname": "Fred",
    "lastname": "Bloggs",
    "email": "fred@bloggs.com",
    "password": "fred"
}
EOT
cat data.json

curl ${OPTIONS} -X POST ${ENDPOINT}${COMMAND} \
--header "Content-Type: application/json" \
--data-binary @data.json \
--output output.txt > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
printf "status: ${status}\n"
jq . output.txt

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -eq 200 ]; then
    : # ok
elif [ ${status} -eq 400 ]; then
    : # ok, already exists
else
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

echo "------------------------------------------------------------------"
echo "Authenticate"

COMMAND="/users/authenticate"
USERID="007"
PASSWORD="topsecret"

curl ${OPTIONS} -X POST -u "${USERID}:${PASSWORD}" ${ENDPOINT}${COMMAND} \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--output output.txt > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
printf "status: ${status}\n"
jq . output.txt

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

echo "------------------------------------------------------------------"
echo "Register"

COMMAND="/users/register"

cat > data.json <<EOT
{  
    "userID": "alice",
    "firstname": "Alice",
    "lastname": "Wonderland",
    "email": "alice@abc.com",
    "password": "wonder"
}
EOT
cat data.json

curl ${OPTIONS} -X POST ${ENDPOINT}${COMMAND} \
--header "Content-Type: application/json" \
--data-binary @data.json \
--output output.txt > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
printf "status: ${status}\n"
jq . output.txt

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -eq 200 ]; then
    : # ok
elif [ ${status} -eq 400 ]; then
    : # ok, already exists
else
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

echo "------------------------------------------------------------------"
echo "Update Person Role"

COMMAND="/users/role/alice"

cat > data.json <<EOT
{
    "role": "normal"
}
EOT
cat data.json

curl ${OPTIONS} -X PUT ${ENDPOINT}${COMMAND} \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--data-binary @data.json \
--output output.txt > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
printf "status: ${status}\n"
jq . output.txt

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

echo "------------------------------------------------------------------"
echo "Update Person Player"

COMMAND="/users/player/alice"

cat > data.json <<EOT
{
    "player": true
}
EOT
cat data.json

curl ${OPTIONS} -X PUT ${ENDPOINT}${COMMAND} \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--data-binary @data.json \
--output output.txt > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
printf "status: ${status}\n"
jq . output.txt

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

echo "------------------------------------------------------------------"
echo "Read Person - alice"

COMMAND="/users/alice"

curl ${OPTIONS} -X GET ${ENDPOINT}${COMMAND} \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--output output.txt > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
printf "status: ${status}\n"
jq . output.txt

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

echo "------------------------------------------------------------------"
echo "Read People"

COMMAND="/users"

cat > data.json <<EOT
{
    "filter": [
        "admin",
        "normal",
        "suspended"
    ]
}
EOT
cat data.json

curl ${OPTIONS} -X GET ${ENDPOINT}${COMMAND} \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--data-binary @data.json \
--output output.txt > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
printf "status: ${status}\n"
jq . output.txt

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

echo "------------------------------------------------------------------"
echo "Logout"

COMMAND="/users/logout"

curl ${OPTIONS} -X GET ${ENDPOINT}${COMMAND} \
--header "Content-Type: application/json" \
--header "Accept: application/json" \
--output output.txt > status.txt

result=$?
status=$(cat status.txt)

echo "result: ${result}"
printf "status: ${status}\n"
jq . output.txt

if [ ! ${result} -eq 0 ]; then
    echo "Error: $0[${LINENO}]"
    exit 1
fi

if [ ${status} -ne 200 ]; then
    echo "Error: $0[${LINENO}]"
    echo "status: ${status}"
    exit 1
fi

echo "------------------------------------------------------------------"